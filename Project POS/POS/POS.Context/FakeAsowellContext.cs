// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace POS.Context
{
    using POS.Entities;
    using POS.Interfaces;
    using POS.Mapping;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class FakeAsowellContext : IAsowellContext
    {
        public System.Data.Entity.DbSet<AdminRe> AdminRes { get; set; }
        public System.Data.Entity.DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public System.Data.Entity.DbSet<Chair> Chairs { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<Ingredient> Ingredients { get; set; }
        public System.Data.Entity.DbSet<OrderDetailsTemp> OrderDetailsTemps { get; set; }
        public System.Data.Entity.DbSet<OrderNote> OrderNotes { get; set; }
        public System.Data.Entity.DbSet<OrderNoteDetail> OrderNoteDetails { get; set; }
        public System.Data.Entity.DbSet<OrderTemp> OrderTemps { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<ProductDetail> ProductDetails { get; set; }
        public System.Data.Entity.DbSet<ReceiptNote> ReceiptNotes { get; set; }
        public System.Data.Entity.DbSet<ReceiptNoteDetail> ReceiptNoteDetails { get; set; }
        public System.Data.Entity.DbSet<SalaryNote> SalaryNotes { get; set; }
        public System.Data.Entity.DbSet<Table> Tables { get; set; }
        public System.Data.Entity.DbSet<WareHouse> WareHouses { get; set; }
        public System.Data.Entity.DbSet<WorkingHistory> WorkingHistories { get; set; }

        public FakeAsowellContext()
        {
            AdminRes = new FakeDbSet<AdminRe>("AdId");
            ApplicationLogs = new FakeDbSet<ApplicationLog>("Id");
            Chairs = new FakeDbSet<Chair>("ChairId");
            Customers = new FakeDbSet<Customer>("CusId");
            Employees = new FakeDbSet<Employee>("EmpId");
            Ingredients = new FakeDbSet<Ingredient>("IgdId");
            OrderDetailsTemps = new FakeDbSet<OrderDetailsTemp>("OrdertempId", "ProductId");
            OrderNotes = new FakeDbSet<OrderNote>("OrdernoteId");
            OrderNoteDetails = new FakeDbSet<OrderNoteDetail>("OrdernoteId", "ProductId");
            OrderTemps = new FakeDbSet<OrderTemp>("OrdertempId");
            Products = new FakeDbSet<Product>("ProductId");
            ProductDetails = new FakeDbSet<ProductDetail>("PdetailId");
            ReceiptNotes = new FakeDbSet<ReceiptNote>("RnId");
            ReceiptNoteDetails = new FakeDbSet<ReceiptNoteDetail>("RnId", "IgdId");
            SalaryNotes = new FakeDbSet<SalaryNote>("SnId");
            Tables = new FakeDbSet<Table>("TableId");
            WareHouses = new FakeDbSet<WareHouse>("WarehouseId");
            WorkingHistories = new FakeDbSet<WorkingHistory>("WhId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
